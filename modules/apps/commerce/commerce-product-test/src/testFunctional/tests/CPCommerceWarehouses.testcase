@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Commerce";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if ("${testPortalInstance}" == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			CommerceConfiguration.commerceAdminTearDown();

			CommerceConfiguration.commerceInitializersTearDown();
		}
	}

	@description = "This is a test for COMMERCE-6207. UI inventory items lifecycle"
	@ignore = "true"
	@priority = "3"
	test AddEditAndRemoveItemToWarehouse {
		property portal.acceptance = "false";

		// TODO COMMERCE-6207 AddItemToWarehouse Pending Implementation

	}

	@description = "This is a test for COMMERCE-6206. Add income items"
	@ignore = "true"
	@priority = "3"
	test AddIncomeItems {
		property portal.acceptance = "false";

		// TODO COMMERCE-6206 AddIncomeItems Pending Implementation
	}

	@description = "This is a test for COMMERCE-6200. Consume booked quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test ConsumeBookedQuantitiesFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6200 ConsumeBookedQuantitiesFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-6201. Consume quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test ConsumeQuantitiesFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6201 ConsumeQuantitiesFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-5706. As a system admin i want to be able to create / update and delete a new warehouse"
	@ignore = "true"
	@priority = "3"
	test CreateAndUpdateNewWarehouse {
		property portal.acceptance = "false";

		// TODO COMMERCE-5706 CreateAndUpdateNewWarehouse Pending Implementation
		// NOTE: 1. Delete action is already handled by commerceAdminTearDown
		// 2. Before any test related to warehouses, remember to create the countries via Health Check
	}

	@description = "This is a test for COMMERCE-5707. As a product specialist i want to be able to deactivate a warehouse"
	@ignore = "true"
	@priority = "3"
	test DeactivateWarehouse {
		property portal.acceptance = "false";

		// TODO COMMERCE-5707 DeactivateWarehouse Pending Implementation
	}

	@description = "This is a test for COMMERCE-6199. Get available quantities of one item in multiple warehouses"
	@ignore = "true"
	@priority = "3"
	test GetAvailableQuantityFromMultipleWarehouses {
		property portal.acceptance = "false";

		// TODO COMMERCE-6199 GetAvailableQuantityFromMultipleWarehouses Pending Implementation
	}

	@description = "This is a test for COMMERCE-6204. Get stock quantity of a SKU for specific channel"
	@ignore = "true"
	@priority = "3"
	test GetChannelSKUStockQuantity {
		property portal.acceptance = "false";

		// TODO COMMERCE-6204 GetChannelSKUStockQuantity Pending Implementation
	}

	@description = "This is a test for COMMERCE-6203. Get stock quantity of a SKU"
	@ignore = "true"
	@priority = "3"
	test GetSKUStockQuantity {
		property portal.acceptance = "false";

		// TODO COMMERCE-6203 GetSKUStockQuantity Pending Implementation
	}

	@description = "This is a test for COMMERCE-6205. Get warehouse names given a SKU"
	@ignore = "true"
	@priority = "3"
	test GetWarehouseNameGivenChannel {
		property portal.acceptance = "false";

		// TODO COMMERCE-6205 GetWarehouseNameGivenChannel Pending Implementation
	}

	@description = "This is a test for COMMERCE-6202. It should be possible to limit the warehouse stock quantity by channel"
	@priority = "3"
	test LimitWarehouseStockQuantityByChannel {
		property portal.acceptance = "false";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Inventory Management",
			portlet = "Warehouses");

		Click(
			key_itemName = "Italy",
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE_CLICK");

		if (!(IsElementPresent( specifiedCollapse = "Channels",
					locator1 = "CommerceEntry#CHECK_WAREHOUSE_COLLAPSE_OPEN"))) {
			Click(
				key_contentType = "Channels",
				locator1 = "Notifications#NOTIFICATION_DELIVERY_PANEL");

			Pause(locator1 = "1000");
		}
		

		Button.clickSave();

		Click(
			key_itemName = "Italy",
			locator1 = "AppBuilder#ITEM_ON_THE_TABLE_CLICK");

		AssertChecked(
			checkboxName = "Minium Portal",
			locator1 = "Checkbox#ANY_CHECKBOX_CHECKED");
	}

	@description = "This is a test for COMMERCE-6208. Concurrency management for inventory entities"
	@ignore = "true"
	@priority = "3"
	test ManageInventoryEntityConcurrency {
		property portal.acceptance = "false";

		// TODO COMMERCE-6208 ManageInventoryEntityConcurrency Pending Implementation
	}

	@description = "This is a test for COMMERCE-5708. As a product specialist i want to update the quantity of a product inside a warehouse"
	@ignore = "true"
	@priority = "3"
	test UpdateInventorySKUQuantity {
		property portal.acceptance = "false";

		// TODO COMMERCE-5708 UpdateInventorySKUQuantity Pending Implementation
	}

}